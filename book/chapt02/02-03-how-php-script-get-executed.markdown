# 第三节 PHP脚本的执行

目前的编程语言可以分为两大类:

* 一类是像C/C++, .NET, Java之类的编译型语言, 它们的共性是: 运行之前必须对源代码进行编译,然后运行编译后的目标文件.
* 第二类就是像PHP, Javascript, Ruby, Python这些解释型语言, 他们都无需经过编译即可"运行". 虽然可以理解为直接运行,
但它们并不是真的直接就被能被机器理解, 机器只能理解机器语言,那这些语言是怎么被执行的呢, 一般这些语言都需要一个**解释器**,
由解释器来执行这些源码, 实际上这些语言还是会经过编译环节,
只不过它们一般会在运行之前实时进行编译. 为了效率,并不是所有语言都是每次执行的时候都会重新编译一边,
比如PHP的各种opcode缓存扩展(APC, xcache, eAccelerator等),比如Python会将编译的中间文件保存成pyc/pyo文件,避免每次运行都需要重新进行编译所带来的性能损失.

PHP的脚本的执行也需要一个解释器, 比如命令行下的php程序,或者apache的mod_php模块等等. 前一节提到了PHP的SAPI接口, 下面就以PHP命令行程序为例解释PHP脚本是怎么被执行的.
例如如下的这段PHP脚本:

	[php]
	<?php

	function say_something($msg)
	{
		echo $msg;
	}

	$str = "Hello, Tipi!\n";
	say_something($str);

假设上面的代码保存在名为say.php的文件中, 用PHP命令行程序执行这个脚本:
	
	[bash]
	$ php --help  # 显示php程序可以接受的参数
	$ php ./say.php

这段代码的输出显然是Hello, Tipi!, 那么在执行脚本的时候PHP/Zend都做了些什么呢? 这些语句是怎么样让php输出这段话的呢? 下面将一步一步的进行介绍.

## 执行
1. 第一步 首先要启动php程序, 程序进行一些基本的初始化,比如读取传递给php程序的参数, 具体可以传递给php程序什么参数,可以参考第一条命令的输出 启动PHP以及Zend引擎

### 脚本的编译

PHP在读取到脚本文件后第一步对代码进行词法分析, PHP的词法分析器是lex, 词法规则文件在$PHP_SRC/Zend/zend_language_scanner.l,
PHP中提供了一个函数token_get_all()方法, 该方法接收一个字符串参数, 返回一个数组.例如将上面的php代码作为参数.

将脚本切分为一个一个的标记(token), 第二步zend引擎将这些token进行词法分析
并编译成opcode

### 脚本的执行

### 启动PHP及Zend引擎
如前两小节的介绍. 在前面的例子中,首先启动php命令行程序. 该程序通过SAPI接口将要执行的文件./say.php传递给PHP执行程序.
程序启动Zend引擎, 引擎加载注册的php扩展.处理完以后zend引擎开始解析php脚本, 经过解析后,zend引擎将解析后的脚本



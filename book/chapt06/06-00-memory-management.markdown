# 第六节 内存管理

内存管理是计算机编程中非常基础的操作之一，如在C/C++语言中，内存操作需要程序员自己编码实现，
包括申请内存，销毁内存，修改内存的大小等。如果在实现时如果申请了内存而没有释放则会造成内存泄露，
如果这种情况出现在常驻程序中，久而久之，程序会把机器的内存耗光。对于类似于PHP这样的动态语言来说，
内存管理是其至关重要的一个模块，它在很大程序上决定了程序的执行效率，
在PHP代码的运行过程中会出现大量的创建变量和销毁变量（也可能是被自动销毁了）等操作，这些都与内存管理相关。
PHP从开始就有一套属于自己的内存管理机制了，但是却没有了类似于Java的垃圾回收机制。
在PHP5.3之后，引入了新的垃圾回收机制，至此，PHP的内存管理机制更加完善。

内存管理之所以出现，是因为内存有限。在有限的内存中，我们如果使用这些内存，当若干个程序在机器上运行时，
我们不知道在某个时刻，某个程序会需要多少内存，这决定了内存的需求是变化的。
对于变化的内存需求，我们在使用内存时需要确认以下的内容：

1. 是否有足够的内存供我们的程序使用
1. 如何从足够可用的内存中获取部分内存
1. 对于使用后的内存，是否可以将其销毁并将其重新分配给其它程序使用

以上的三个内容实际是一个判断操作，一个分配操作，一个回收操作，这就是内存管理的最基本的操作。
对于类似于PHP这样的动态语言来说，这些操作都是不可见的，透明的。这些操作都被PHP语言本身实现了。
这也就是我们所要讲的PHP的内存管理。

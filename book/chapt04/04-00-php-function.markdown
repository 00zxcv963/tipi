# 第四章 函数
函数是一种可以在任何被需要的时候执行的代码块。它不仅仅包括用户自定义的函数，更多的是程序语言实现的库函数。

## 用户定义的函数
如下所示手册中的展示函数用途的伪代码

    [php]
    function foo($arg_1, $arg_2, ..., $arg_n) {
        echo "Example function.\n";
        return $retval;
    }

任何有效的 PHP 代码都有可能出现在函数内部，甚至包括其它函数和类定义。

>**NOTE**
>在 PHP 3 中，函数必须在被调用之前定义。而 PHP 4 则不再有这样的条件。除非函数如以下两个范例中有条件的定义。



## 内部函数
PHP 有很多标准的函数和结构。如我们常见的count,strpos,implode等函数，这些都是标准函数，它们都以标准扩展的形式存在；
如我们经常用到的isset,empty,eval等函数，或者它们应该称之为语言结构。
还有一些函数需要和特定地 PHP 扩展模块一起编译，否则在使用它们的时候就会得到一个致命的“未定义函数”错误。
从源码层来看，标准的函数和标准的语言结构是分离。

>**NOTE**
>标准函数的实现存放在ext/standard目录中。

## 匿名函数
匿名函数的作用就是扩大函数的使用功能，在PHP 5.3以前，传递Callback的方式，我们只有两种选择：

* 字符串的函数名
* 使用create_function的返回

在PHP5.3以后, 我们多了一个选择--Closure。但是PHP 5.3中对匿名函数的支持, 也仅仅是把要保持的外部变量, 做为Closure对象的”Static属性”,关于如何实现我们将在后面的章节介绍。
一个匿名函数的例子：

    [php]
    $func = function($str) {
                echo $str;
            };

    $str = "tipi";
    $func($str);
    print_r($func);

## 变量函数
PHP 支持变量函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且将尝试执行它。除此之外，这个可以被用于实现回调函数，函数表等。
一个变量函数的简单例子：

    [php]
    $func = 'print_r';
    $func('i am print_r function.');

>**NOTE**
>变量函数不能用于语言结构，




# 第八节 命名空间

## 命名空间概述
在维基百科中，对[命名空间](http://zh.wikipedia.org/wiki/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4)的定义是：
命名空间（英语：Namespace）表示标识符（identifier）的上下文（context）。一个标识符可在多个命名空间中定义，
它在不同命名空间中的含义是互不相干的。在编程语言中，命名空间是一种特殊的作用域，它包含了处于该作用域内的标识符，
且本身也用一个标识符来表示，这样便将一系列在逻辑上相关的标识符用一个标识符组织了起来。
函数和类的作用域可被视作隐式命名空间，它们和可见性、可访问性和对象生命周期不可分割的联系在一起。

命名空间可以看作是一种封装事物的方法，同时也可以看作是组织代码结构的一种形式，在很多语言中都可以见到这种抽象概念和组织形式。
在PHP中，命名空间用来解决在编写类库或应用程序时创建可重用的代码如类或函数时碰到的两类问题：

1. 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。
1. 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。

PHP从5.3.0版本开始支持命名空间特性。看一个定义和使用命名空间的示例：

    [php]
	<?php
    namespace tipi;
    class Exception {
        public static $var = 'think in php internal';
    }

    const E_ALL = "E_ALL IN Tipi";

    function strlen(){
        echo 'strlen in tipi';
    }

    echo Exception::$var;
    echo strlen(Exception::$var);

如上所示，定义了命名空间tipi,在这个命名空间内定义了一个Exception类，一个E_ALL常量和一个函数strlen。
这些类、常量和函数PHP默认已经实现。假如没有这个命名空间，声明这些类、常量或函数时会报函数重复声明或类重复声明的错误，
并且常量的定义也不会成功。

从PHP语言来看，命名空间通过 **namespace** 关键字定义，在命名空间内，可以包括任何合法的PHP代码，但是它的影响范围仅限于类、常量和函数。
从语法上来讲，PHP支持在一个文件中定义多个命名空间，但是不推荐这种代码组织方式。
当需要将全局的非命名空间中的代码与命名空间中的代码组合在一起，全局代码必须用一个不带名称的 namespace 语句加上大括号括起来。

此时，思考一下，在PHP内核中，命名空间的定义是如何实现的呢？
当在多个命名空间中存在多个相同的函数或类时，如何区分？
命名空间内的函数如何调用？

## 命名空间的定义

除了开始的declare语句外，命名空间的括号外（或）不得有任何PHP代码。

## 使用命名空间

### 别名/导入

### 名称解析规则实现


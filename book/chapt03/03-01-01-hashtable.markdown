# 哈希表(HashTable)

PHP中使用最为频繁的数据类型主要有字符串和数组了, PHP比较容易上手也得益于非常灵活的数组类型. 
在开始详细介绍这些数据类型之前必须要介绍一下哈希表(HashTable).

## HashTable
哈希表在实践中使用的非常广泛, 例如编译器通常会维护的一个符号表来保存标记, 很多高级语言中也显式的支持哈希表,
哈希表通常提供查找(Search), 插入(Insert), 删除(Delete)等操作, 这些操作在最坏的情况下和链表的性能一样为O(n),
不过通常并不会这么坏, 合理设计的哈希算法能有效的避免这类情况, 通常哈希表的这些操作时间复杂度为O(1). 
这也是它应用场景很多的原因.

哈希表可以理解为一个数组的扩展, 数组使用数字下标来寻址, 如果关键字(key)的范围较小我们可以直接使用数组, 
而如果关键字范围太大的话, 采用数组我们需要为所有可能的key申请空间, 很多情况下这是不现实的. 即使空间足够, 
空间利用率也会很低, 这并不理想. 所以人们使用一种映射关系来将key映射到特定的域中:

	h(key) -> index

这样我们就能将key映射到合适的范围, 这也降低了空间开销. 其中h()为哈希函数, 哈希函数的选择很重要, 
因为我们的key空间很大, 映射到一个较小的空间中, 必然可能会出现两个不同的key映射到同一个index上, 
这是就出现了冲突. 目前解决hash冲突的方法主要有两种: 链接法和开放寻找法.

### 链接法


### 开放寻址法

